plugins {
	id 'build-dashboard'
	id 'com.github.ben-manes.versions' version '0.33.0'
	id 'com.google.cloud.tools.jib' version '2.6.0'
	id 'com.gorylenko.gradle-git-properties' version '2.2.4'
	id 'com.palantir.git-version' version '0.12.3'
	id 'groovy'
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'jacoco'
	id 'java'
	id 'nebula.maven-publish' version '17.0.0'
	id 'nebula.project' version '7.0.9'
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'project-report'
}
apply plugin: 'nebula.facet'

defaultTasks 'clean', 'printVersion', 'classes', 'projectReport', 'buildDashboard', 'check', 'bootJar', 'publishToMavenLocal'

//noinspection GroovyUnusedAssignment
group = 'org.shimomoto'
//noinspection GroovyAssignabilityCheck
version gitVersion()
//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

springBoot {
	buildInfo()
}

facets {
	integrationTest {
		parentSourceSet = 'test'
		//noinspection GroovyAssignabilityCheck
		testTaskName = 'integrationTest'
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.jetbrains:annotations:20.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-ui:1.4.3'
	implementation 'commons-codec:commons-codec:1.15'
	implementation 'com.codepoetics:protonpack:1.16'

	runtimeOnly 'com.h2database:h2'

	testCompile 'org.codehaus.groovy:groovy-all:2.5.12'
	testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
	testCompile 'org.spockframework:spock-spring:1.3-groovy-2.5'
	testCompile 'org.hamcrest:hamcrest-core:1.3' // only necessary if Hamcrest matchers are used
	testCompile 'com.jayway.jsonpath:json-path'
	testCompile('com.athaydes:spock-reports:1.8.0') {
		transitive = false
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testRuntime 'cglib:cglib-nodep:3.1'          // allows mocking of classes (in addition to interfaces)
	testRuntime 'org.objenesis:objenesis:2.1'
	// allows mocking of classes without default constructor (together with CGLIB)

	integrationTestImplementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'

	integrationTestRuntime 'com.h2database:h2'
}

processResources {
	expand(project.properties)
}

test {
	useJUnitPlatform()
	testLogging {
		events 'passed', 'skipped', 'failed'
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['org/shimomoto/mancala/model/entity/*',
			                            'org/shimomoto/mancala/model/transfer/*',
			                            'org/shimomoto/mancala/repository/*',
			                            'org/shimomoto/mancala/config/*'])
		}))
	}
	dependsOn test
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}

	rejectVersionIf {
		isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
	}

	resolutionStrategy {
		componentSelection {
			all {
				if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
					reject('Release candidate')
				}
			}
		}
	}
}

jib.from.image = 'openjdk:14-jdk-alpine'
